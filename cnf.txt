S -> SS | VARCNF1 | VARCNF2 | VARCNF3 | VARCNF4 | VARCNF5 | IFS | CNF6INBRACKET | WHILES | FORS | DEFS | CLASSS | CNF7CNF8 | CNF9VAR | CNF10CNF11 | TRIPLESINGLEQUOTEOPENCNF12 | TRIPLEDOUBLEQUOTEOPENCNF13 | CNF14STRING ;
CNF1 -> CNF15VARVAL ;
CNF2 -> CNF16VARVAL ;
CNF3 -> CNF17VARVAL ;
CNF4 -> CNF18VARVAL ;
CNF5 -> CNF19VARVAL ;
CNF6 -> print ;
CNF7 -> import ;
CNF8 -> VARCNF20 ;
CNF9 -> import ;
CNF10 -> from ;
CNF11 -> VARIMPORT ;
CNF12 -> STRINGTRIPLESINGLEQUOTECLOSE ;
CNF13 -> STRINGTRIPLEDOUBLEQUOTECLOSE ;
CNF14 -> # ;
CNF15 -> = ;
CNF16 -> += ;
CNF17 -> -= ;
CNF18 -> *= ;
CNF19 -> /= ;
CNF20 -> CNF21VAR ;
CNF21 -> as ;
VARVAL -> variable | angka | VARVALCNF22 | VARVALCNF23 | VARVALCNF24 | CNF25CNF26 | True | False | BOOLEANCNF27 | BOOLEANCNF28 | CNF29BOOLEAN | VARVALCNF30 | VARVALCNF31 | CNF32CNF33 | CNF34CNF35 | VARVALCNF36 | CNF37INBRACKET | TYPECNF38 | VARVALCNF39 | CNF40INBRACKET | CNF41CNF42 ;
CNF22 -> OPERATORVARVAL ;
CNF23 -> CNF43VARVAL ;
CNF24 -> CNF44VARVAL ;
CNF25 -> ( ;
CNF26 -> VARVALCNF45 ;
CNF27 -> CNF46BOOLEAN ;
CNF28 -> CNF47BOOLEAN ;
CNF29 -> not ;
CNF30 -> CNF48VARVAL ;
CNF31 -> EVALUATORVARVAL ;
CNF32 -> " ;
CNF33 -> STRINGCNF49 ;
CNF34 -> ' ;
CNF35 -> STRINGCNF50 ;
CNF36 -> OPERATORVARVAL ;
CNF37 -> input ;
CNF38 -> CNF51CNF52 ;
CNF39 -> CNF53VARVAL ;
CNF40 -> len ;
CNF41 -> with ;
CNF42 -> CNF54CNF55 ;
CNF43 -> ** ;
CNF44 -> // ;
CNF45 -> ) ;
CNF46 -> and ;
CNF47 -> or ;
CNF48 -> is ;
CNF49 -> " ;
CNF50 -> ' ;
CNF51 -> ( ;
CNF52 -> INPUTCNF56 ;
CNF53 -> , ;
CNF54 -> open ;
CNF55 -> INBRACKETCNF57 ;
CNF56 -> ) ;
CNF57 -> CNF58VAR ;
CNF58 -> as ;
OPERATOR -> + | - | * | / | % ;
VAR -> variable ;
VAL -> angka | VARVALCNF59 | VARVALCNF60 | VARVALCNF61 | CNF62CNF63 | True | False | BOOLEANCNF64 | BOOLEANCNF65 | CNF66BOOLEAN | VARVALCNF67 | VARVALCNF68 | CNF69CNF70 | CNF71CNF72 ;
CNF59 -> OPERATORVARVAL ;
CNF60 -> CNF73VARVAL ;
CNF61 -> CNF74VARVAL ;
CNF62 -> ( ;
CNF63 -> VARVALCNF75 ;
CNF64 -> CNF76BOOLEAN ;
CNF65 -> CNF77BOOLEAN ;
CNF66 -> not ;
CNF67 -> CNF78VARVAL ;
CNF68 -> EVALUATORVARVAL ;
CNF69 -> " ;
CNF70 -> STRINGCNF79 ;
CNF71 -> ' ;
CNF72 -> STRINGCNF80 ;
CNF73 -> ** ;
CNF74 -> // ;
CNF75 -> ) ;
CNF76 -> and ;
CNF77 -> or ;
CNF78 -> is ;
CNF79 -> " ;
CNF80 -> ' ;
EVALUATOR -> > | < | == | != | <= | >= ;
STRING -> string | STRINGSTRING ;
BOOLEAN -> True | False | BOOLEANCNF81 | BOOLEANCNF82 | CNF83BOOLEAN | VARVALCNF84 | VARVALCNF85 ;
CNF81 -> CNF86BOOLEAN ;
CNF82 -> CNF87BOOLEAN ;
CNF83 -> not ;
CNF84 -> CNF88VARVAL ;
CNF85 -> EVALUATORVARVAL ;
CNF86 -> and ;
CNF87 -> or ;
CNF88 -> is ;
COMMENT -> TRIPLESINGLEQUOTEOPENCNF89 | TRIPLEDOUBLEQUOTEOPENCNF90 | CNF91STRING ;
CNF89 -> STRINGTRIPLESINGLEQUOTECLOSE ;
CNF90 -> STRINGTRIPLEDOUBLEQUOTECLOSE ;
CNF91 -> # ;
TRIPLEDOUBLEQUOTEOPEN -> CNF92STRING | """ ;
CNF92 -> """ ;
TRIPLEDOUBLEQUOTECLOSE -> """ | STRINGCNF93 ;
CNF93 -> """ ;
TRIPLESINGLEQUOTEOPEN -> CNF94STRING | ''' ;
CNF94 -> ''' ;
TRIPLESINGLEQUOTECLOSE -> ''' | STRINGCNF95 ;
CNF95 -> ''' ;
INBRACKET -> CNF96CNF97 | CNF98CNF99 ;
CNF96 -> ( ;
CNF97 -> VARVALCNF100 ;
CNF98 -> ( ;
CNF99 -> ) ;
CNF100 -> ) ;
EXPRES -> CNF101CNF102 | True | False | BOOLEANCNF103 | BOOLEANCNF104 | CNF105BOOLEAN | VARVALCNF106 | VARVALCNF107 ;
CNF101 -> ( ;
CNF102 -> BOOLEANCNF108 ;
CNF103 -> CNF109BOOLEAN ;
CNF104 -> CNF110BOOLEAN ;
CNF105 -> not ;
CNF106 -> CNF111VARVAL ;
CNF107 -> EVALUATORVARVAL ;
CNF108 -> ) ;
CNF109 -> and ;
CNF110 -> or ;
CNF111 -> is ;
RAISE -> CNF112INBRACKET ;
CNF112 -> raise ;
BREAK -> break ;
PASS -> pass ;
PRINT -> CNF113INBRACKET ;
CNF113 -> print ;
CONTINUE -> continue ;
ELSE -> CNF114CNF115 ;
CNF114 -> else ;
CNF115 -> : ;
IF -> CNF116CNF117 | IFCNF118 | IFCNF119 | IFCNF120 | IFCNF121 | IFCNF122 | IFCNF123 ;
CNF116 -> if ;
CNF117 -> EXPRESCNF124 ;
CNF118 -> SCNF125 ;
CNF119 -> SCNF126 ;
CNF120 -> SRAISE ;
CNF121 -> SBREAK ;
CNF122 -> SPASS ;
CNF123 -> SCONTINUE ;
CNF124 -> : ;
CNF125 -> ELIFS ;
CNF126 -> ELSES ;
ELIF -> CNF127CNF128 | ELIFCNF129 | ELIFCNF130 ;
CNF127 -> elif ;
CNF128 -> EXPRESCNF131 ;
CNF129 -> SCNF132 ;
CNF130 -> SCNF133 ;
CNF131 -> : ;
CNF132 -> ELIFS ;
CNF133 -> ELSES ;
TYPE -> str | float | int | double ;
INPUT -> CNF134INBRACKET | TYPECNF135 ;
CNF134 -> input ;
CNF135 -> CNF136CNF137 ;
CNF136 -> ( ;
CNF137 -> INPUTCNF138 ;
CNF138 -> ) ;
RANGE -> CNF139INBRACKET ;
CNF139 -> range ;
FROM -> CNF140CNF141 ;
CNF140 -> from ;
CNF141 -> VARIMPORT ;
WHILE -> CNF142CNF143 ;
CNF142 -> while ;
CNF143 -> EXPRESCNF144 ;
CNF144 -> : ;
FOR -> CNF145CNF146 | CNF147CNF148 ;
CNF145 -> for ;
CNF146 -> VARCNF149 ;
CNF147 -> for ;
CNF148 -> VARCNF150 ;
CNF149 -> CNF151CNF152 ;
CNF150 -> CNF153CNF154 ;
CNF151 -> in ;
CNF152 -> STRINGCNF155 ;
CNF153 -> in ;
CNF154 -> RANGECNF156 ;
CNF155 -> : ;
CNF156 -> : ;
RETURN -> CNF157BOOLEAN | CNF158VAL ;
CNF157 -> return ;
CNF158 -> return ;
CLASS -> CNF159CNF160 ;
CNF159 -> class ;
CNF160 -> VARCNF161 ;
CNF161 -> : ;
IMPORT -> CNF162CNF163 | CNF164VAR ;
CNF162 -> import ;
CNF163 -> VARCNF165 ;
CNF164 -> import ;
CNF165 -> CNF166VAR ;
CNF166 -> as ;
METHOD -> CNF167INBRACKET | CNF168CNF169 ;
CNF167 -> len ;
CNF168 -> with ;
CNF169 -> CNF170CNF171 ;
CNF170 -> open ;
CNF171 -> INBRACKETCNF172 ;
CNF172 -> CNF173VAR ;
CNF173 -> as ;
DEF -> CNF174CNF175 | DEFCNF176 ;
CNF174 -> def ;
CNF175 -> VARCNF177 ;
CNF176 -> SRETURN ;
CNF177 -> INBRACKETCNF178 ;
CNF178 -> : ;