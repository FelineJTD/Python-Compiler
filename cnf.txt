S -> SS | VARCNF1 | VARCNF2 | VARCNF3 | VARCNF4 | VARCNF5 | IFS | CNF6INBRACKET | WHILES | FORS | DEFCNF7 | CLASSS | CNF8CNF9 | CNF10VARVAL | CNF11CNF12 | TRIPLESINGLEQUOTEOPENCNF13 | TRIPLEDOUBLEQUOTEOPENCNF14 | CNF15STRING | VARINBRACKET | VARCNF16 ;
CNF1 -> CNF17VARVAL ;
CNF2 -> CNF18VARVAL ;
CNF3 -> CNF19VARVAL ;
CNF4 -> CNF20VARVAL ;
CNF5 -> CNF21VARVAL ;
CNF6 -> print ;
CNF7 -> SRETURN ;
CNF8 -> import ;
CNF9 -> VARVALCNF22 ;
CNF10 -> import ;
CNF11 -> from ;
CNF12 -> VARVALIMPORT ;
CNF13 -> STRINGTRIPLESINGLEQUOTECLOSE ;
CNF14 -> STRINGTRIPLEDOUBLEQUOTECLOSE ;
CNF15 -> # ;
CNF16 -> CNF23CNF24 ;
CNF17 -> = ;
CNF18 -> += ;
CNF19 -> -= ;
CNF20 -> *= ;
CNF21 -> /= ;
CNF22 -> CNF25VARVAL ;
CNF23 -> = ;
CNF24 -> VARINBRACKET ;
CNF25 -> as ;
VARVAL -> variable | angka | VARVALCNF26 | VARVALCNF27 | VARVALCNF28 | CNF29CNF30 | True | False | BOOLEANCNF31 | BOOLEANCNF32 | CNF33BOOLEAN | VARVALCNF34 | VARVALCNF35 | CNF36CNF37 | CNF38CNF39 | CNF40CNF41 | CNF42CNF43 | VARVALCNF44 | CNF45INBRACKET | TYPECNF46 | VARVALCNF47 | CNF48INBRACKET | CNF49CNF50 ;
CNF26 -> OPERATORVARVAL ;
CNF27 -> CNF51VARVAL ;
CNF28 -> CNF52VARVAL ;
CNF29 -> ( ;
CNF30 -> VARVALCNF53 ;
CNF31 -> CNF54BOOLEAN ;
CNF32 -> CNF55BOOLEAN ;
CNF33 -> not ;
CNF34 -> CNF56VARVAL ;
CNF35 -> EVALUATORVARVAL ;
CNF36 -> " ;
CNF37 -> STRINGCNF57 ;
CNF38 -> ' ;
CNF39 -> STRINGCNF58 ;
CNF40 -> [ ;
CNF41 -> STRINGCNF59 ;
CNF42 -> { ;
CNF43 -> VARVALCNF60 ;
CNF44 -> OPERATORVARVAL ;
CNF45 -> input ;
CNF46 -> CNF61CNF62 ;
CNF47 -> CNF63VARVAL ;
CNF48 -> len ;
CNF49 -> with ;
CNF50 -> CNF64CNF65 ;
CNF51 -> ** ;
CNF52 -> // ;
CNF53 -> ) ;
CNF54 -> and ;
CNF55 -> or ;
CNF56 -> is ;
CNF57 -> " ;
CNF58 -> ' ;
CNF59 -> ] ;
CNF60 -> } ;
CNF61 -> ( ;
CNF62 -> INPUTCNF66 ;
CNF63 -> , ;
CNF64 -> open ;
CNF65 -> INBRACKETCNF67 ;
CNF66 -> ) ;
CNF67 -> CNF68VAR ;
CNF68 -> as ;
OPERATOR -> + | - | * | / | % ;
VAR -> variable ;
VAL -> angka | VARVALCNF69 | VARVALCNF70 | VARVALCNF71 | CNF72CNF73 | True | False | BOOLEANCNF74 | BOOLEANCNF75 | CNF76BOOLEAN | VARVALCNF77 | VARVALCNF78 | CNF79CNF80 | CNF81CNF82 | CNF83CNF84 | CNF85CNF86 ;
CNF69 -> OPERATORVARVAL ;
CNF70 -> CNF87VARVAL ;
CNF71 -> CNF88VARVAL ;
CNF72 -> ( ;
CNF73 -> VARVALCNF89 ;
CNF74 -> CNF90BOOLEAN ;
CNF75 -> CNF91BOOLEAN ;
CNF76 -> not ;
CNF77 -> CNF92VARVAL ;
CNF78 -> EVALUATORVARVAL ;
CNF79 -> " ;
CNF80 -> STRINGCNF93 ;
CNF81 -> ' ;
CNF82 -> STRINGCNF94 ;
CNF83 -> [ ;
CNF84 -> STRINGCNF95 ;
CNF85 -> { ;
CNF86 -> VARVALCNF96 ;
CNF87 -> ** ;
CNF88 -> // ;
CNF89 -> ) ;
CNF90 -> and ;
CNF91 -> or ;
CNF92 -> is ;
CNF93 -> " ;
CNF94 -> ' ;
CNF95 -> ] ;
CNF96 -> } ;
EVALUATOR -> > | < | == | != | <= | >= ;
STRING -> string | STRINGSTRING ;
BOOLEAN -> True | False | BOOLEANCNF97 | BOOLEANCNF98 | CNF99BOOLEAN | VARVALCNF100 | VARVALCNF101 ;
CNF97 -> CNF102BOOLEAN ;
CNF98 -> CNF103BOOLEAN ;
CNF99 -> not ;
CNF100 -> CNF104VARVAL ;
CNF101 -> EVALUATORVARVAL ;
CNF102 -> and ;
CNF103 -> or ;
CNF104 -> is ;
COMMENT -> TRIPLESINGLEQUOTEOPENCNF105 | TRIPLEDOUBLEQUOTEOPENCNF106 | CNF107STRING ;
CNF105 -> STRINGTRIPLESINGLEQUOTECLOSE ;
CNF106 -> STRINGTRIPLEDOUBLEQUOTECLOSE ;
CNF107 -> # ;
TRIPLEDOUBLEQUOTEOPEN -> CNF108STRING | """ ;
CNF108 -> """ ;
TRIPLEDOUBLEQUOTECLOSE -> """ | STRINGCNF109 ;
CNF109 -> """ ;
TRIPLESINGLEQUOTEOPEN -> CNF110STRING | ''' ;
CNF110 -> ''' ;
TRIPLESINGLEQUOTECLOSE -> ''' | STRINGCNF111 ;
CNF111 -> ''' ;
INBRACKET -> CNF112CNF113 | CNF114CNF115 ;
CNF112 -> ( ;
CNF113 -> VARVALCNF116 ;
CNF114 -> ( ;
CNF115 -> ) ;
CNF116 -> ) ;
EXPRES -> CNF117CNF118 | True | False | BOOLEANCNF119 | BOOLEANCNF120 | CNF121BOOLEAN | VARVALCNF122 | VARVALCNF123 ;
CNF117 -> ( ;
CNF118 -> BOOLEANCNF124 ;
CNF119 -> CNF125BOOLEAN ;
CNF120 -> CNF126BOOLEAN ;
CNF121 -> not ;
CNF122 -> CNF127VARVAL ;
CNF123 -> EVALUATORVARVAL ;
CNF124 -> ) ;
CNF125 -> and ;
CNF126 -> or ;
CNF127 -> is ;
RAISE -> CNF128INBRACKET ;
CNF128 -> raise ;
BREAK -> break ;
PASS -> pass ;
PRINT -> CNF129INBRACKET ;
CNF129 -> print ;
CONTINUE -> continue ;
ELSE -> CNF130CNF131 ;
CNF130 -> else ;
CNF131 -> : ;
IF -> CNF132CNF133 | IFCNF134 | IFCNF135 | IFCNF136 | IFCNF137 | IFCNF138 | IFCNF139 ;
CNF132 -> if ;
CNF133 -> EXPRESCNF140 ;
CNF134 -> SCNF141 ;
CNF135 -> SCNF142 ;
CNF136 -> SRAISE ;
CNF137 -> SBREAK ;
CNF138 -> SPASS ;
CNF139 -> SCONTINUE ;
CNF140 -> : ;
CNF141 -> ELIFS ;
CNF142 -> ELSES ;
ELIF -> CNF143CNF144 | ELIFCNF145 | ELIFCNF146 ;
CNF143 -> elif ;
CNF144 -> EXPRESCNF147 ;
CNF145 -> SCNF148 ;
CNF146 -> SCNF149 ;
CNF147 -> : ;
CNF148 -> ELIFS ;
CNF149 -> ELSES ;
TYPE -> str | float | int | double ;
INPUT -> CNF150INBRACKET | TYPECNF151 ;
CNF150 -> input ;
CNF151 -> CNF152CNF153 ;
CNF152 -> ( ;
CNF153 -> INPUTCNF154 ;
CNF154 -> ) ;
RANGE -> CNF155INBRACKET ;
CNF155 -> range ;
FROM -> CNF156CNF157 ;
CNF156 -> from ;
CNF157 -> VARVALIMPORT ;
WHILE -> CNF158CNF159 ;
CNF158 -> while ;
CNF159 -> EXPRESCNF160 ;
CNF160 -> : ;
FOR -> CNF161CNF162 | CNF163CNF164 ;
CNF161 -> for ;
CNF162 -> VARCNF165 ;
CNF163 -> for ;
CNF164 -> VARCNF166 ;
CNF165 -> CNF167CNF168 ;
CNF166 -> CNF169CNF170 ;
CNF167 -> in ;
CNF168 -> STRINGCNF171 ;
CNF169 -> in ;
CNF170 -> RANGECNF172 ;
CNF171 -> : ;
CNF172 -> : ;
RETURN -> CNF173BOOLEAN | CNF174VAL ;
CNF173 -> return ;
CNF174 -> return ;
CLASS -> CNF175CNF176 ;
CNF175 -> class ;
CNF176 -> VARCNF177 ;
CNF177 -> : ;
IMPORT -> CNF178CNF179 | CNF180VARVAL ;
CNF178 -> import ;
CNF179 -> VARVALCNF181 ;
CNF180 -> import ;
CNF181 -> CNF182VARVAL ;
CNF182 -> as ;
METHOD -> CNF183INBRACKET | CNF184CNF185 ;
CNF183 -> len ;
CNF184 -> with ;
CNF185 -> CNF186CNF187 ;
CNF186 -> open ;
CNF187 -> INBRACKETCNF188 ;
CNF188 -> CNF189VAR ;
CNF189 -> as ;
DEF -> CNF190CNF191 ;
CNF190 -> def ;
CNF191 -> VARCNF192 ;
CNF192 -> INBRACKETCNF193 ;
CNF193 -> : ;