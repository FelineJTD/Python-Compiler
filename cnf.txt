S -> SS | VARCNF1 | VARCNF2 | VARCNF3 | VARCNF4 | VARCNF5 | IFS | CNF6INBRACKET | WHILES | FORS | DEFCNF7 | CLASSS | CNF8CNF9 | CNF10VARVAL | CNF11CNF12 | TRIPLESINGLEQUOTEOPENCNF13 | TRIPLEDOUBLEQUOTEOPENCNF14 | CNF15STRING | VARINBRACKET | VARCNF16 | VARINBRACKET | VARCNF17 | VARCNF18 | variable | WITHS | pass ;
CNF1 -> CNF19VARVAL ;
CNF2 -> CNF20VARVAL ;
CNF3 -> CNF21VARVAL ;
CNF4 -> CNF22VARVAL ;
CNF5 -> CNF23VARVAL ;
CNF6 -> print ;
CNF7 -> SRETURN ;
CNF8 -> import ;
CNF9 -> VARVALCNF24 ;
CNF10 -> import ;
CNF11 -> from ;
CNF12 -> VARVALIMPORT ;
CNF13 -> STRINGTRIPLESINGLEQUOTECLOSE ;
CNF14 -> STRINGTRIPLEDOUBLEQUOTECLOSE ;
CNF15 -> # ;
CNF16 -> CNF25CNF26 ;
CNF17 -> INBRACKETCNF27 ;
CNF18 -> CNF28METHOD ;
CNF19 -> = ;
CNF20 -> += ;
CNF21 -> -= ;
CNF22 -> *= ;
CNF23 -> /= ;
CNF24 -> CNF29VARVAL ;
CNF25 -> = ;
CNF26 -> VARINBRACKET ;
CNF27 -> CNF30METHOD ;
CNF28 -> . ;
CNF29 -> as ;
CNF30 -> . ;
VARVAL -> variable | angka | VARVALCNF31 | VARVALCNF32 | VARVALCNF33 | CNF34CNF35 | True | False | BOOLEANCNF36 | BOOLEANCNF37 | CNF38BOOLEAN | VARVALCNF39 | VARVALCNF40 | CNF41CNF42 | CNF43CNF44 | CNF45CNF46 | CNF47CNF48 | CNF49CNF50 | CNF51CNF52 | CNF53CNF54 | CNF55CNF56 | VARVALCNF57 | CNF58INBRACKET | TYPECNF59 | VARVALCNF60 | VARINBRACKET | VARCNF61 | VARCNF62 | variable ;
CNF31 -> OPERATORVARVAL ;
CNF32 -> CNF63VARVAL ;
CNF33 -> CNF64VARVAL ;
CNF34 -> ( ;
CNF35 -> VARVALCNF65 ;
CNF36 -> CNF66BOOLEAN ;
CNF37 -> CNF67BOOLEAN ;
CNF38 -> not ;
CNF39 -> CNF68VARVAL ;
CNF40 -> EVALUATORVARVAL ;
CNF41 -> ' ;
CNF42 -> STRINGCNF69 ;
CNF43 -> " ;
CNF44 -> STRINGCNF70 ;
CNF45 -> [ ;
CNF46 -> VARVALCNF71 ;
CNF47 -> { ;
CNF48 -> VARVALCNF72 ;
CNF49 -> [ ;
CNF50 -> ] ;
CNF51 -> { ;
CNF52 -> } ;
CNF53 -> " ;
CNF54 -> " ;
CNF55 -> ' ;
CNF56 -> ' ;
CNF57 -> OPERATORVARVAL ;
CNF58 -> input ;
CNF59 -> CNF73CNF74 ;
CNF60 -> CNF75VARVAL ;
CNF61 -> INBRACKETCNF76 ;
CNF62 -> CNF77METHOD ;
CNF63 -> ** ;
CNF64 -> // ;
CNF65 -> ) ;
CNF66 -> and ;
CNF67 -> or ;
CNF68 -> is ;
CNF69 -> ' ;
CNF70 -> " ;
CNF71 -> ] ;
CNF72 -> } ;
CNF73 -> ( ;
CNF74 -> INPUTCNF78 ;
CNF75 -> , ;
CNF76 -> CNF79METHOD ;
CNF77 -> . ;
CNF78 -> ) ;
CNF79 -> . ;
OPERATOR -> + | - | * | / | % ;
VAR -> variable ;
VAL -> angka | VARVALCNF80 | VARVALCNF81 | VARVALCNF82 | CNF83CNF84 | True | False | BOOLEANCNF85 | BOOLEANCNF86 | CNF87BOOLEAN | VARVALCNF88 | VARVALCNF89 | CNF90CNF91 | CNF92CNF93 | CNF94CNF95 | CNF96CNF97 | CNF98CNF99 | CNF100CNF101 | CNF102CNF103 | CNF104CNF105 ;
CNF80 -> OPERATORVARVAL ;
CNF81 -> CNF106VARVAL ;
CNF82 -> CNF107VARVAL ;
CNF83 -> ( ;
CNF84 -> VARVALCNF108 ;
CNF85 -> CNF109BOOLEAN ;
CNF86 -> CNF110BOOLEAN ;
CNF87 -> not ;
CNF88 -> CNF111VARVAL ;
CNF89 -> EVALUATORVARVAL ;
CNF90 -> ' ;
CNF91 -> STRINGCNF112 ;
CNF92 -> " ;
CNF93 -> STRINGCNF113 ;
CNF94 -> [ ;
CNF95 -> VARVALCNF114 ;
CNF96 -> { ;
CNF97 -> VARVALCNF115 ;
CNF98 -> [ ;
CNF99 -> ] ;
CNF100 -> { ;
CNF101 -> } ;
CNF102 -> " ;
CNF103 -> " ;
CNF104 -> ' ;
CNF105 -> ' ;
CNF106 -> ** ;
CNF107 -> // ;
CNF108 -> ) ;
CNF109 -> and ;
CNF110 -> or ;
CNF111 -> is ;
CNF112 -> ' ;
CNF113 -> " ;
CNF114 -> ] ;
CNF115 -> } ;
EVALUATOR -> > | < | == | != | <= | >= ;
STRING -> string | STRINGSTRING ;
BOOLEAN -> True | False | BOOLEANCNF116 | BOOLEANCNF117 | CNF118BOOLEAN | VARVALCNF119 | VARVALCNF120 ;
CNF116 -> CNF121BOOLEAN ;
CNF117 -> CNF122BOOLEAN ;
CNF118 -> not ;
CNF119 -> CNF123VARVAL ;
CNF120 -> EVALUATORVARVAL ;
CNF121 -> and ;
CNF122 -> or ;
CNF123 -> is ;
COMMENT -> TRIPLESINGLEQUOTEOPENCNF124 | TRIPLEDOUBLEQUOTEOPENCNF125 | CNF126STRING ;
CNF124 -> STRINGTRIPLESINGLEQUOTECLOSE ;
CNF125 -> STRINGTRIPLEDOUBLEQUOTECLOSE ;
CNF126 -> # ;
TRIPLEDOUBLEQUOTEOPEN -> CNF127CNF128 | CNF129CNF130 ;
CNF127 -> " ;
CNF128 -> CNF131CNF132 ;
CNF129 -> " ;
CNF130 -> CNF133CNF134 ;
CNF131 -> " ;
CNF132 -> CNF135STRING ;
CNF133 -> " ;
CNF134 -> " ;
CNF135 -> " ;
TRIPLEDOUBLEQUOTECLOSE -> CNF136CNF137 | STRINGCNF138 ;
CNF136 -> " ;
CNF137 -> CNF139CNF140 ;
CNF138 -> CNF141CNF142 ;
CNF139 -> " ;
CNF140 -> " ;
CNF141 -> " ;
CNF142 -> CNF143CNF144 ;
CNF143 -> " ;
CNF144 -> " ;
TRIPLESINGLEQUOTEOPEN -> CNF145CNF146 | CNF147CNF148 ;
CNF145 -> ' ;
CNF146 -> CNF149CNF150 ;
CNF147 -> ' ;
CNF148 -> CNF151CNF152 ;
CNF149 -> ' ;
CNF150 -> CNF153STRING ;
CNF151 -> ' ;
CNF152 -> ' ;
CNF153 -> ' ;
TRIPLESINGLEQUOTECLOSE -> CNF154CNF155 | STRINGCNF156 ;
CNF154 -> ' ;
CNF155 -> CNF157CNF158 ;
CNF156 -> CNF159CNF160 ;
CNF157 -> ' ;
CNF158 -> ' ;
CNF159 -> ' ;
CNF160 -> CNF161CNF162 ;
CNF161 -> ' ;
CNF162 -> ' ;
INBRACKET -> CNF163CNF164 | CNF165CNF166 | CNF167CNF168 | CNF169CNF170 ;
CNF163 -> ( ;
CNF164 -> METHODCNF171 ;
CNF165 -> ( ;
CNF166 -> VARVALCNF172 ;
CNF167 -> ( ;
CNF168 -> ) ;
CNF169 -> ( ;
CNF170 -> STRINGCNF173 ;
CNF171 -> ) ;
CNF172 -> ) ;
CNF173 -> ) ;
EXPRES -> CNF174CNF175 | True | False | BOOLEANCNF176 | BOOLEANCNF177 | CNF178BOOLEAN | VARVALCNF179 | VARVALCNF180 | CNF181CNF182 | CNF183CNF184 | CNF185CNF186 | CNF187CNF188 ;
CNF174 -> ( ;
CNF175 -> BOOLEANCNF189 ;
CNF176 -> CNF190BOOLEAN ;
CNF177 -> CNF191BOOLEAN ;
CNF178 -> not ;
CNF179 -> CNF192VARVAL ;
CNF180 -> EVALUATORVARVAL ;
CNF181 -> ( ;
CNF182 -> METHODCNF193 ;
CNF183 -> ( ;
CNF184 -> VARVALCNF194 ;
CNF185 -> ( ;
CNF186 -> ) ;
CNF187 -> ( ;
CNF188 -> STRINGCNF195 ;
CNF189 -> ) ;
CNF190 -> and ;
CNF191 -> or ;
CNF192 -> is ;
CNF193 -> ) ;
CNF194 -> ) ;
CNF195 -> ) ;
RAISE -> CNF196INBRACKET ;
CNF196 -> raise ;
BREAK -> break ;
PASS -> pass ;
PRINT -> CNF197INBRACKET ;
CNF197 -> print ;
CONTINUE -> continue ;
ELSE -> CNF198CNF199 ;
CNF198 -> else ;
CNF199 -> : ;
IF -> CNF200CNF201 | IFCNF202 | IFCNF203 | IFCNF204 | IFCNF205 | IFCNF206 | IFCNF207 ;
CNF200 -> if ;
CNF201 -> EXPRESCNF208 ;
CNF202 -> SCNF209 ;
CNF203 -> SCNF210 ;
CNF204 -> SRAISE ;
CNF205 -> SBREAK ;
CNF206 -> SPASS ;
CNF207 -> SCONTINUE ;
CNF208 -> : ;
CNF209 -> ELIFS ;
CNF210 -> ELSES ;
ELIF -> CNF211CNF212 | ELIFCNF213 | ELIFCNF214 ;
CNF211 -> elif ;
CNF212 -> EXPRESCNF215 ;
CNF213 -> SCNF216 ;
CNF214 -> SCNF217 ;
CNF215 -> : ;
CNF216 -> ELIFS ;
CNF217 -> ELSES ;
TYPE -> str | float | int | double ;
INPUT -> CNF218INBRACKET | TYPECNF219 ;
CNF218 -> input ;
CNF219 -> CNF220CNF221 ;
CNF220 -> ( ;
CNF221 -> INPUTCNF222 ;
CNF222 -> ) ;
RANGE -> CNF223INBRACKET ;
CNF223 -> range ;
FROM -> CNF224CNF225 ;
CNF224 -> from ;
CNF225 -> VARVALIMPORT ;
WHILE -> CNF226CNF227 ;
CNF226 -> while ;
CNF227 -> EXPRESCNF228 ;
CNF228 -> : ;
FOR -> CNF229CNF230 | CNF231CNF232 ;
CNF229 -> for ;
CNF230 -> VARCNF233 ;
CNF231 -> for ;
CNF232 -> VARCNF234 ;
CNF233 -> CNF235CNF236 ;
CNF234 -> CNF237CNF238 ;
CNF235 -> in ;
CNF236 -> STRINGCNF239 ;
CNF237 -> in ;
CNF238 -> RANGECNF240 ;
CNF239 -> : ;
CNF240 -> : ;
RETURN -> CNF241BOOLEAN | CNF242VAL ;
CNF241 -> return ;
CNF242 -> return ;
CLASS -> CNF243CNF244 ;
CNF243 -> class ;
CNF244 -> VARCNF245 ;
CNF245 -> : ;
IMPORT -> CNF246CNF247 | CNF248VARVAL ;
CNF246 -> import ;
CNF247 -> VARVALCNF249 ;
CNF248 -> import ;
CNF249 -> CNF250VARVAL ;
CNF250 -> as ;
METHOD -> VARINBRACKET | VARCNF251 | VARCNF252 | variable ;
CNF251 -> INBRACKETCNF253 ;
CNF252 -> CNF254METHOD ;
CNF253 -> CNF255METHOD ;
CNF254 -> . ;
CNF255 -> . ;
DEF -> CNF256CNF257 ;
CNF256 -> def ;
CNF257 -> VARCNF258 ;
CNF258 -> INBRACKETCNF259 ;
CNF259 -> : ;
WITH -> CNF260CNF261 ;
CNF260 -> with ;
CNF261 -> SCNF262 ;
CNF262 -> CNF263CNF264 ;
CNF263 -> as ;
CNF264 -> VARCNF265 ;
CNF265 -> : ;