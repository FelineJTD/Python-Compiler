S -> SS | VARCNF1 | VARCNF2 | VARCNF3 | VARCNF4 | VARCNF5 | IFS | CNF6INBRACKET | WHILES | FORS | DEFCNF7 | CLASSS | CNF8CNF9 | CNF10VARVAL | CNF11CNF12 | TRIPLESINGLEQUOTEOPENCNF13 | TRIPLEDOUBLEQUOTEOPENCNF14 | CNF15STRING | VARINBRACKET | VARCNF16 | VARINBRACKET | VARCNF17 | VARCNF18 | variable | CNF19CNF20 | pass ;
CNF1 -> CNF21VARVAL ;
CNF2 -> CNF22VARVAL ;
CNF3 -> CNF23VARVAL ;
CNF4 -> CNF24VARVAL ;
CNF5 -> CNF25VARVAL ;
CNF6 -> print ;
CNF7 -> SRETURN ;
CNF8 -> import ;
CNF9 -> VARVALCNF26 ;
CNF10 -> import ;
CNF11 -> from ;
CNF12 -> VARVALIMPORT ;
CNF13 -> STRINGTRIPLESINGLEQUOTECLOSE ;
CNF14 -> STRINGTRIPLEDOUBLEQUOTECLOSE ;
CNF15 -> # ;
CNF16 -> CNF27CNF28 ;
CNF17 -> INBRACKETCNF29 ;
CNF18 -> CNF30METHOD ;
CNF19 -> with ;
CNF20 -> SCNF31 ;
CNF21 -> = ;
CNF22 -> += ;
CNF23 -> -= ;
CNF24 -> *= ;
CNF25 -> /= ;
CNF26 -> CNF32VARVAL ;
CNF27 -> = ;
CNF28 -> VARINBRACKET ;
CNF29 -> CNF33METHOD ;
CNF30 -> . ;
CNF31 -> CNF34CNF35 ;
CNF32 -> as ;
CNF33 -> . ;
CNF34 -> as ;
CNF35 -> VARCNF36 ;
CNF36 -> CNF37S ;
CNF37 -> : ;
VARVAL -> variable | angka | VARVALCNF38 | VARVALCNF39 | VARVALCNF40 | CNF41CNF42 | True | False | BOOLEANCNF43 | BOOLEANCNF44 | CNF45BOOLEAN | VARVALCNF46 | VARVALCNF47 | CNF48CNF49 | CNF50CNF51 | CNF52CNF53 | CNF54CNF55 | CNF56CNF57 | CNF58CNF59 | CNF60CNF61 | CNF62CNF63 | VARVALCNF64 | CNF65INBRACKET | TYPECNF66 | VARVALCNF67 | VARINBRACKET | VARCNF68 | VARCNF69 | variable ;
CNF38 -> OPERATORVARVAL ;
CNF39 -> CNF70VARVAL ;
CNF40 -> CNF71VARVAL ;
CNF41 -> ( ;
CNF42 -> VARVALCNF72 ;
CNF43 -> CNF73BOOLEAN ;
CNF44 -> CNF74BOOLEAN ;
CNF45 -> not ;
CNF46 -> CNF75VARVAL ;
CNF47 -> EVALUATORVARVAL ;
CNF48 -> ' ;
CNF49 -> STRINGCNF76 ;
CNF50 -> " ;
CNF51 -> STRINGCNF77 ;
CNF52 -> [ ;
CNF53 -> VARVALCNF78 ;
CNF54 -> { ;
CNF55 -> VARVALCNF79 ;
CNF56 -> [ ;
CNF57 -> ] ;
CNF58 -> { ;
CNF59 -> } ;
CNF60 -> " ;
CNF61 -> " ;
CNF62 -> ' ;
CNF63 -> ' ;
CNF64 -> OPERATORVARVAL ;
CNF65 -> input ;
CNF66 -> CNF80CNF81 ;
CNF67 -> CNF82VARVAL ;
CNF68 -> INBRACKETCNF83 ;
CNF69 -> CNF84METHOD ;
CNF70 -> ** ;
CNF71 -> // ;
CNF72 -> ) ;
CNF73 -> and ;
CNF74 -> or ;
CNF75 -> is ;
CNF76 -> ' ;
CNF77 -> " ;
CNF78 -> ] ;
CNF79 -> } ;
CNF80 -> ( ;
CNF81 -> INPUTCNF85 ;
CNF82 -> , ;
CNF83 -> CNF86METHOD ;
CNF84 -> . ;
CNF85 -> ) ;
CNF86 -> . ;
OPERATOR -> + | - | * | / | % ;
VAR -> variable ;
VAL -> angka | VARVALCNF87 | VARVALCNF88 | VARVALCNF89 | CNF90CNF91 | True | False | BOOLEANCNF92 | BOOLEANCNF93 | CNF94BOOLEAN | VARVALCNF95 | VARVALCNF96 | CNF97CNF98 | CNF99CNF100 | CNF101CNF102 | CNF103CNF104 | CNF105CNF106 | CNF107CNF108 | CNF109CNF110 | CNF111CNF112 ;
CNF87 -> OPERATORVARVAL ;
CNF88 -> CNF113VARVAL ;
CNF89 -> CNF114VARVAL ;
CNF90 -> ( ;
CNF91 -> VARVALCNF115 ;
CNF92 -> CNF116BOOLEAN ;
CNF93 -> CNF117BOOLEAN ;
CNF94 -> not ;
CNF95 -> CNF118VARVAL ;
CNF96 -> EVALUATORVARVAL ;
CNF97 -> ' ;
CNF98 -> STRINGCNF119 ;
CNF99 -> " ;
CNF100 -> STRINGCNF120 ;
CNF101 -> [ ;
CNF102 -> VARVALCNF121 ;
CNF103 -> { ;
CNF104 -> VARVALCNF122 ;
CNF105 -> [ ;
CNF106 -> ] ;
CNF107 -> { ;
CNF108 -> } ;
CNF109 -> " ;
CNF110 -> " ;
CNF111 -> ' ;
CNF112 -> ' ;
CNF113 -> ** ;
CNF114 -> // ;
CNF115 -> ) ;
CNF116 -> and ;
CNF117 -> or ;
CNF118 -> is ;
CNF119 -> ' ;
CNF120 -> " ;
CNF121 -> ] ;
CNF122 -> } ;
EVALUATOR -> > | < | == | != | <= | >= ;
STRING -> string | STRINGSTRING ;
BOOLEAN -> True | False | BOOLEANCNF123 | BOOLEANCNF124 | CNF125BOOLEAN | VARVALCNF126 | VARVALCNF127 ;
CNF123 -> CNF128BOOLEAN ;
CNF124 -> CNF129BOOLEAN ;
CNF125 -> not ;
CNF126 -> CNF130VARVAL ;
CNF127 -> EVALUATORVARVAL ;
CNF128 -> and ;
CNF129 -> or ;
CNF130 -> is ;
COMMENT -> TRIPLESINGLEQUOTEOPENCNF131 | TRIPLEDOUBLEQUOTEOPENCNF132 | CNF133STRING ;
CNF131 -> STRINGTRIPLESINGLEQUOTECLOSE ;
CNF132 -> STRINGTRIPLEDOUBLEQUOTECLOSE ;
CNF133 -> # ;
TRIPLEDOUBLEQUOTEOPEN -> CNF134CNF135 | CNF136CNF137 ;
CNF134 -> " ;
CNF135 -> CNF138CNF139 ;
CNF136 -> " ;
CNF137 -> CNF140CNF141 ;
CNF138 -> " ;
CNF139 -> CNF142STRING ;
CNF140 -> " ;
CNF141 -> " ;
CNF142 -> " ;
TRIPLEDOUBLEQUOTECLOSE -> CNF143CNF144 | STRINGCNF145 ;
CNF143 -> " ;
CNF144 -> CNF146CNF147 ;
CNF145 -> CNF148CNF149 ;
CNF146 -> " ;
CNF147 -> " ;
CNF148 -> " ;
CNF149 -> CNF150CNF151 ;
CNF150 -> " ;
CNF151 -> " ;
TRIPLESINGLEQUOTEOPEN -> CNF152CNF153 | CNF154CNF155 ;
CNF152 -> ' ;
CNF153 -> CNF156CNF157 ;
CNF154 -> ' ;
CNF155 -> CNF158CNF159 ;
CNF156 -> ' ;
CNF157 -> CNF160STRING ;
CNF158 -> ' ;
CNF159 -> ' ;
CNF160 -> ' ;
TRIPLESINGLEQUOTECLOSE -> CNF161CNF162 | STRINGCNF163 ;
CNF161 -> ' ;
CNF162 -> CNF164CNF165 ;
CNF163 -> CNF166CNF167 ;
CNF164 -> ' ;
CNF165 -> ' ;
CNF166 -> ' ;
CNF167 -> CNF168CNF169 ;
CNF168 -> ' ;
CNF169 -> ' ;
INBRACKET -> CNF170CNF171 | CNF172CNF173 | CNF174CNF175 | CNF176CNF177 ;
CNF170 -> ( ;
CNF171 -> METHODCNF178 ;
CNF172 -> ( ;
CNF173 -> VARVALCNF179 ;
CNF174 -> ( ;
CNF175 -> ) ;
CNF176 -> ( ;
CNF177 -> STRINGCNF180 ;
CNF178 -> ) ;
CNF179 -> ) ;
CNF180 -> ) ;
EXPRES -> CNF181CNF182 | True | False | BOOLEANCNF183 | BOOLEANCNF184 | CNF185BOOLEAN | VARVALCNF186 | VARVALCNF187 | CNF188CNF189 | CNF190CNF191 | CNF192CNF193 | CNF194CNF195 ;
CNF181 -> ( ;
CNF182 -> BOOLEANCNF196 ;
CNF183 -> CNF197BOOLEAN ;
CNF184 -> CNF198BOOLEAN ;
CNF185 -> not ;
CNF186 -> CNF199VARVAL ;
CNF187 -> EVALUATORVARVAL ;
CNF188 -> ( ;
CNF189 -> METHODCNF200 ;
CNF190 -> ( ;
CNF191 -> VARVALCNF201 ;
CNF192 -> ( ;
CNF193 -> ) ;
CNF194 -> ( ;
CNF195 -> STRINGCNF202 ;
CNF196 -> ) ;
CNF197 -> and ;
CNF198 -> or ;
CNF199 -> is ;
CNF200 -> ) ;
CNF201 -> ) ;
CNF202 -> ) ;
RAISE -> CNF203INBRACKET ;
CNF203 -> raise ;
BREAK -> break ;
PASS -> pass ;
PRINT -> CNF204INBRACKET ;
CNF204 -> print ;
CONTINUE -> continue ;
ELSE -> CNF205CNF206 ;
CNF205 -> else ;
CNF206 -> : ;
IF -> CNF207CNF208 | IFCNF209 | IFCNF210 | IFCNF211 | IFCNF212 | IFCNF213 | IFCNF214 ;
CNF207 -> if ;
CNF208 -> EXPRESCNF215 ;
CNF209 -> SCNF216 ;
CNF210 -> SCNF217 ;
CNF211 -> SRAISE ;
CNF212 -> SBREAK ;
CNF213 -> SPASS ;
CNF214 -> SCONTINUE ;
CNF215 -> : ;
CNF216 -> ELIFS ;
CNF217 -> ELSES ;
ELIF -> CNF218CNF219 | ELIFCNF220 | ELIFCNF221 ;
CNF218 -> elif ;
CNF219 -> EXPRESCNF222 ;
CNF220 -> SCNF223 ;
CNF221 -> SCNF224 ;
CNF222 -> : ;
CNF223 -> ELIFS ;
CNF224 -> ELSES ;
TYPE -> str | float | int | double ;
INPUT -> CNF225INBRACKET | TYPECNF226 ;
CNF225 -> input ;
CNF226 -> CNF227CNF228 ;
CNF227 -> ( ;
CNF228 -> INPUTCNF229 ;
CNF229 -> ) ;
RANGE -> CNF230INBRACKET ;
CNF230 -> range ;
FROM -> CNF231CNF232 ;
CNF231 -> from ;
CNF232 -> VARVALIMPORT ;
WHILE -> CNF233CNF234 ;
CNF233 -> while ;
CNF234 -> EXPRESCNF235 ;
CNF235 -> : ;
FOR -> CNF236CNF237 | CNF238CNF239 ;
CNF236 -> for ;
CNF237 -> VARCNF240 ;
CNF238 -> for ;
CNF239 -> VARCNF241 ;
CNF240 -> CNF242CNF243 ;
CNF241 -> CNF244CNF245 ;
CNF242 -> in ;
CNF243 -> STRINGCNF246 ;
CNF244 -> in ;
CNF245 -> RANGECNF247 ;
CNF246 -> : ;
CNF247 -> : ;
RETURN -> CNF248BOOLEAN | CNF249VAL ;
CNF248 -> return ;
CNF249 -> return ;
CLASS -> CNF250CNF251 ;
CNF250 -> class ;
CNF251 -> VARCNF252 ;
CNF252 -> : ;
IMPORT -> CNF253CNF254 | CNF255VARVAL ;
CNF253 -> import ;
CNF254 -> VARVALCNF256 ;
CNF255 -> import ;
CNF256 -> CNF257VARVAL ;
CNF257 -> as ;
METHOD -> VARINBRACKET | VARCNF258 | VARCNF259 | variable ;
CNF258 -> INBRACKETCNF260 ;
CNF259 -> CNF261METHOD ;
CNF260 -> CNF262METHOD ;
CNF261 -> . ;
CNF262 -> . ;
DEF -> CNF263CNF264 ;
CNF263 -> def ;
CNF264 -> VARCNF265 ;
CNF265 -> INBRACKETCNF266 ;
CNF266 -> : ;
WITH -> CNF267CNF268 ;
CNF267 -> with ;
CNF268 -> SCNF269 ;
CNF269 -> CNF270CNF271 ;
CNF270 -> as ;
CNF271 -> VARCNF272 ;
CNF272 -> CNF273S ;
CNF273 -> : ;