S -> SS | VARCNF1 | VARCNF2 | VARCNF3 | VARCNF4 | VARCNF5 | IFS | CNF6INBRACKET | WHILES | FORS | DEFCNF7 | CLASSS | CNF8CNF9 | CNF10VARVAL | CNF11CNF12 | TRIPLESINGLEQUOTEOPENCNF13 | TRIPLEDOUBLEQUOTEOPENCNF14 | CNF15STRING | VARINBRACKET | VARCNF16 | VARINBRACKET | VARCNF17 | VARCNF18 | WITHS | pass | CNF19METHOD ;
CNF1 -> CNF20VARVAL ;
CNF2 -> CNF21VARVAL ;
CNF3 -> CNF22VARVAL ;
CNF4 -> CNF23VARVAL ;
CNF5 -> CNF24VARVAL ;
CNF6 -> print ;
CNF7 -> SRETURN ;
CNF8 -> import ;
CNF9 -> VARVALCNF25 ;
CNF10 -> import ;
CNF11 -> from ;
CNF12 -> VARVALIMPORT ;
CNF13 -> STRINGTRIPLESINGLEQUOTECLOSE ;
CNF14 -> STRINGTRIPLEDOUBLEQUOTECLOSE ;
CNF15 -> # ;
CNF16 -> CNF26CNF27 ;
CNF17 -> INBRACKETCNF28 ;
CNF18 -> CNF29METHOD ;
CNF19 -> raise ;
CNF20 -> = ;
CNF21 -> += ;
CNF22 -> -= ;
CNF23 -> *= ;
CNF24 -> /= ;
CNF25 -> CNF30VARVAL ;
CNF26 -> = ;
CNF27 -> VARINBRACKET ;
CNF28 -> CNF31METHOD ;
CNF29 -> . ;
CNF30 -> as ;
CNF31 -> . ;
VARVAL -> variable | angka | VARVALCNF32 | VARVALCNF33 | VARVALCNF34 | CNF35CNF36 | True | False | BOOLEANCNF37 | BOOLEANCNF38 | CNF39BOOLEAN | VARVALCNF40 | VARVALCNF41 | CNF42CNF43 | CNF44CNF45 | CNF46CNF47 | CNF48CNF49 | CNF50CNF51 | CNF52CNF53 | CNF54CNF55 | CNF56CNF57 | VARVALCNF58 | CNF59INBRACKET | TYPECNF60 | VARVALCNF61 | VARINBRACKET | VARCNF62 | VARCNF63 ;
CNF32 -> OPERATORVARVAL ;
CNF33 -> CNF64VARVAL ;
CNF34 -> CNF65VARVAL ;
CNF35 -> ( ;
CNF36 -> VARVALCNF66 ;
CNF37 -> CNF67BOOLEAN ;
CNF38 -> CNF68BOOLEAN ;
CNF39 -> not ;
CNF40 -> CNF69VARVAL ;
CNF41 -> EVALUATORVARVAL ;
CNF42 -> ' ;
CNF43 -> STRINGCNF70 ;
CNF44 -> " ;
CNF45 -> STRINGCNF71 ;
CNF46 -> [ ;
CNF47 -> VARVALCNF72 ;
CNF48 -> { ;
CNF49 -> VARVALCNF73 ;
CNF50 -> [ ;
CNF51 -> ] ;
CNF52 -> { ;
CNF53 -> } ;
CNF54 -> " ;
CNF55 -> " ;
CNF56 -> ' ;
CNF57 -> ' ;
CNF58 -> OPERATORVARVAL ;
CNF59 -> input ;
CNF60 -> CNF74CNF75 ;
CNF61 -> CNF76VARVAL ;
CNF62 -> INBRACKETCNF77 ;
CNF63 -> CNF78METHOD ;
CNF64 -> ** ;
CNF65 -> // ;
CNF66 -> ) ;
CNF67 -> and ;
CNF68 -> or ;
CNF69 -> is ;
CNF70 -> ' ;
CNF71 -> " ;
CNF72 -> ] ;
CNF73 -> } ;
CNF74 -> ( ;
CNF75 -> INPUTCNF79 ;
CNF76 -> , ;
CNF77 -> CNF80METHOD ;
CNF78 -> . ;
CNF79 -> ) ;
CNF80 -> . ;
OPERATOR -> + | - | * | / | % ;
VAR -> variable ;
VAL -> angka | VARVALCNF81 | VARVALCNF82 | VARVALCNF83 | CNF84CNF85 | True | False | BOOLEANCNF86 | BOOLEANCNF87 | CNF88BOOLEAN | VARVALCNF89 | VARVALCNF90 | CNF91CNF92 | CNF93CNF94 | CNF95CNF96 | CNF97CNF98 | CNF99CNF100 | CNF101CNF102 | CNF103CNF104 | CNF105CNF106 ;
CNF81 -> OPERATORVARVAL ;
CNF82 -> CNF107VARVAL ;
CNF83 -> CNF108VARVAL ;
CNF84 -> ( ;
CNF85 -> VARVALCNF109 ;
CNF86 -> CNF110BOOLEAN ;
CNF87 -> CNF111BOOLEAN ;
CNF88 -> not ;
CNF89 -> CNF112VARVAL ;
CNF90 -> EVALUATORVARVAL ;
CNF91 -> ' ;
CNF92 -> STRINGCNF113 ;
CNF93 -> " ;
CNF94 -> STRINGCNF114 ;
CNF95 -> [ ;
CNF96 -> VARVALCNF115 ;
CNF97 -> { ;
CNF98 -> VARVALCNF116 ;
CNF99 -> [ ;
CNF100 -> ] ;
CNF101 -> { ;
CNF102 -> } ;
CNF103 -> " ;
CNF104 -> " ;
CNF105 -> ' ;
CNF106 -> ' ;
CNF107 -> ** ;
CNF108 -> // ;
CNF109 -> ) ;
CNF110 -> and ;
CNF111 -> or ;
CNF112 -> is ;
CNF113 -> ' ;
CNF114 -> " ;
CNF115 -> ] ;
CNF116 -> } ;
EVALUATOR -> > | < | == | != | <= | >= ;
STRING -> string | STRINGSTRING ;
BOOLEAN -> True | False | BOOLEANCNF117 | BOOLEANCNF118 | CNF119BOOLEAN | VARVALCNF120 | VARVALCNF121 ;
CNF117 -> CNF122BOOLEAN ;
CNF118 -> CNF123BOOLEAN ;
CNF119 -> not ;
CNF120 -> CNF124VARVAL ;
CNF121 -> EVALUATORVARVAL ;
CNF122 -> and ;
CNF123 -> or ;
CNF124 -> is ;
COMMENT -> TRIPLESINGLEQUOTEOPENCNF125 | TRIPLEDOUBLEQUOTEOPENCNF126 | CNF127STRING ;
CNF125 -> STRINGTRIPLESINGLEQUOTECLOSE ;
CNF126 -> STRINGTRIPLEDOUBLEQUOTECLOSE ;
CNF127 -> # ;
TRIPLEDOUBLEQUOTEOPEN -> CNF128CNF129 | CNF130CNF131 ;
CNF128 -> " ;
CNF129 -> CNF132CNF133 ;
CNF130 -> " ;
CNF131 -> CNF134CNF135 ;
CNF132 -> " ;
CNF133 -> CNF136STRING ;
CNF134 -> " ;
CNF135 -> " ;
CNF136 -> " ;
TRIPLEDOUBLEQUOTECLOSE -> CNF137CNF138 | STRINGCNF139 ;
CNF137 -> " ;
CNF138 -> CNF140CNF141 ;
CNF139 -> CNF142CNF143 ;
CNF140 -> " ;
CNF141 -> " ;
CNF142 -> " ;
CNF143 -> CNF144CNF145 ;
CNF144 -> " ;
CNF145 -> " ;
TRIPLESINGLEQUOTEOPEN -> CNF146CNF147 | CNF148CNF149 ;
CNF146 -> ' ;
CNF147 -> CNF150CNF151 ;
CNF148 -> ' ;
CNF149 -> CNF152CNF153 ;
CNF150 -> ' ;
CNF151 -> CNF154STRING ;
CNF152 -> ' ;
CNF153 -> ' ;
CNF154 -> ' ;
TRIPLESINGLEQUOTECLOSE -> CNF155CNF156 | STRINGCNF157 ;
CNF155 -> ' ;
CNF156 -> CNF158CNF159 ;
CNF157 -> CNF160CNF161 ;
CNF158 -> ' ;
CNF159 -> ' ;
CNF160 -> ' ;
CNF161 -> CNF162CNF163 ;
CNF162 -> ' ;
CNF163 -> ' ;
INBRACKET -> CNF164CNF165 | CNF166CNF167 | CNF168CNF169 | CNF170CNF171 ;
CNF164 -> ( ;
CNF165 -> METHODCNF172 ;
CNF166 -> ( ;
CNF167 -> VARVALCNF173 ;
CNF168 -> ( ;
CNF169 -> ) ;
CNF170 -> ( ;
CNF171 -> STRINGCNF174 ;
CNF172 -> ) ;
CNF173 -> ) ;
CNF174 -> ) ;
EXPRES -> CNF175CNF176 | True | False | BOOLEANCNF177 | BOOLEANCNF178 | CNF179BOOLEAN | VARVALCNF180 | VARVALCNF181 | CNF182CNF183 | CNF184CNF185 | CNF186CNF187 | CNF188CNF189 ;
CNF175 -> ( ;
CNF176 -> BOOLEANCNF190 ;
CNF177 -> CNF191BOOLEAN ;
CNF178 -> CNF192BOOLEAN ;
CNF179 -> not ;
CNF180 -> CNF193VARVAL ;
CNF181 -> EVALUATORVARVAL ;
CNF182 -> ( ;
CNF183 -> METHODCNF194 ;
CNF184 -> ( ;
CNF185 -> VARVALCNF195 ;
CNF186 -> ( ;
CNF187 -> ) ;
CNF188 -> ( ;
CNF189 -> STRINGCNF196 ;
CNF190 -> ) ;
CNF191 -> and ;
CNF192 -> or ;
CNF193 -> is ;
CNF194 -> ) ;
CNF195 -> ) ;
CNF196 -> ) ;
RAISE -> CNF197METHOD ;
CNF197 -> raise ;
BREAK -> break ;
PASS -> pass ;
PRINT -> CNF198INBRACKET ;
CNF198 -> print ;
CONTINUE -> continue ;
ELSE -> CNF199CNF200 ;
CNF199 -> else ;
CNF200 -> : ;
IF -> CNF201CNF202 | IFCNF203 | IFCNF204 | IFCNF205 ;
CNF201 -> if ;
CNF202 -> EXPRESCNF206 ;
CNF203 -> SCNF207 ;
CNF204 -> SCNF208 ;
CNF205 -> SRAISE ;
CNF206 -> : ;
CNF207 -> ELIFS ;
CNF208 -> ELSES ;
ELIF -> CNF209CNF210 | ELIFCNF211 | ELIFCNF212 ;
CNF209 -> elif ;
CNF210 -> EXPRESCNF213 ;
CNF211 -> SCNF214 ;
CNF212 -> SCNF215 ;
CNF213 -> : ;
CNF214 -> ELIFS ;
CNF215 -> ELSES ;
TYPE -> str | float | int | double ;
INPUT -> CNF216INBRACKET | TYPECNF217 ;
CNF216 -> input ;
CNF217 -> CNF218CNF219 ;
CNF218 -> ( ;
CNF219 -> INPUTCNF220 ;
CNF220 -> ) ;
RANGE -> CNF221INBRACKET ;
CNF221 -> range ;
FROM -> CNF222CNF223 ;
CNF222 -> from ;
CNF223 -> VARVALIMPORT ;
WHILE -> CNF224CNF225 ;
CNF224 -> while ;
CNF225 -> EXPRESCNF226 ;
CNF226 -> : ;
FOR -> CNF227CNF228 | CNF229CNF230 ;
CNF227 -> for ;
CNF228 -> VARCNF231 ;
CNF229 -> for ;
CNF230 -> VARCNF232 ;
CNF231 -> CNF233CNF234 ;
CNF232 -> CNF235CNF236 ;
CNF233 -> in ;
CNF234 -> STRINGCNF237 ;
CNF235 -> in ;
CNF236 -> RANGECNF238 ;
CNF237 -> : ;
CNF238 -> : ;
RETURN -> CNF239BOOLEAN | CNF240VARVAL ;
CNF239 -> return ;
CNF240 -> return ;
CLASS -> CNF241CNF242 ;
CNF241 -> class ;
CNF242 -> VARCNF243 ;
CNF243 -> : ;
IMPORT -> CNF244CNF245 | CNF246VARVAL ;
CNF244 -> import ;
CNF245 -> VARVALCNF247 ;
CNF246 -> import ;
CNF247 -> CNF248VARVAL ;
CNF248 -> as ;
METHOD -> VARINBRACKET | VARCNF249 | VARCNF250 ;
CNF249 -> INBRACKETCNF251 ;
CNF250 -> CNF252METHOD ;
CNF251 -> CNF253METHOD ;
CNF252 -> . ;
CNF253 -> . ;
DEF -> CNF254CNF255 ;
CNF254 -> def ;
CNF255 -> VARCNF256 ;
CNF256 -> INBRACKETCNF257 ;
CNF257 -> : ;
WITH -> CNF258CNF259 ;
CNF258 -> with ;
CNF259 -> SCNF260 ;
CNF260 -> CNF261CNF262 ;
CNF261 -> as ;
CNF262 -> VARCNF263 ;
CNF263 -> : ;