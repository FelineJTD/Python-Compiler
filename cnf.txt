S -> SS | VARCNF1 | VARCNF2 | VARCNF3 | VARCNF4 | VARCNF5 | IFS | CNF6INBRACKET | WHILES | FORS | DEFCNF7 | CLASSS | CNF8CNF9 | CNF10VARVAL | CNF11CNF12 | TRIPLESINGLEQUOTEOPENCNF13 | TRIPLEDOUBLEQUOTEOPENCNF14 | CNF15STRING | VARINBRACKET | VARCNF16 | VARINBRACKET | VARCNF17 | VARCNF18 | WITHS | pass | CNF19METHOD ;
CNF1 -> CNF20VARVAL ;
CNF2 -> CNF21VARVAL ;
CNF3 -> CNF22VARVAL ;
CNF4 -> CNF23VARVAL ;
CNF5 -> CNF24VARVAL ;
CNF6 -> print ;
CNF7 -> SRETURN ;
CNF8 -> import ;
CNF9 -> VARVALCNF25 ;
CNF10 -> import ;
CNF11 -> from ;
CNF12 -> VARVALIMPORT ;
CNF13 -> STRINGTRIPLESINGLEQUOTECLOSE ;
CNF14 -> STRINGTRIPLEDOUBLEQUOTECLOSE ;
CNF15 -> # ;
CNF16 -> CNF26CNF27 ;
CNF17 -> INBRACKETCNF28 ;
CNF18 -> CNF29METHOD ;
CNF19 -> raise ;
CNF20 -> = ;
CNF21 -> += ;
CNF22 -> -= ;
CNF23 -> *= ;
CNF24 -> /= ;
CNF25 -> CNF30VAR ;
CNF26 -> = ;
CNF27 -> VARINBRACKET ;
CNF28 -> CNF31METHOD ;
CNF29 -> . ;
CNF30 -> as ;
CNF31 -> . ;
VARVAL -> variable | angka | VARVALCNF32 | VARVALCNF33 | VARVALCNF34 | CNF35CNF36 | True | False | BOOLEANCNF37 | BOOLEANCNF38 | CNF39BOOLEAN | VARVALCNF40 | VARVALCNF41 | CNF42CNF43 | CNF44CNF45 | CNF46CNF47 | CNF48CNF49 | CNF50CNF51 | CNF52CNF53 | CNF54CNF55 | CNF56CNF57 | VARVALCNF58 | CNF59INBRACKET | TYPECNF60 | VARVALCNF61 | VARINBRACKET | VARCNF62 | VARCNF63 | None ;
CNF32 -> OPERATORVARVAL ;
CNF33 -> CNF64VARVAL ;
CNF34 -> CNF65VARVAL ;
CNF35 -> ( ;
CNF36 -> VARVALCNF66 ;
CNF37 -> CNF67BOOLEAN ;
CNF38 -> CNF68BOOLEAN ;
CNF39 -> not ;
CNF40 -> CNF69VARVAL ;
CNF41 -> EVALUATORVARVAL ;
CNF42 -> ' ;
CNF43 -> STRINGCNF70 ;
CNF44 -> " ;
CNF45 -> STRINGCNF71 ;
CNF46 -> [ ;
CNF47 -> VARVALCNF72 ;
CNF48 -> { ;
CNF49 -> VARVALCNF73 ;
CNF50 -> [ ;
CNF51 -> ] ;
CNF52 -> { ;
CNF53 -> } ;
CNF54 -> " ;
CNF55 -> " ;
CNF56 -> ' ;
CNF57 -> ' ;
CNF58 -> OPERATORVARVAL ;
CNF59 -> input ;
CNF60 -> CNF74CNF75 ;
CNF61 -> CNF76VARVAL ;
CNF62 -> INBRACKETCNF77 ;
CNF63 -> CNF78METHOD ;
CNF64 -> ** ;
CNF65 -> // ;
CNF66 -> ) ;
CNF67 -> and ;
CNF68 -> or ;
CNF69 -> is ;
CNF70 -> ' ;
CNF71 -> " ;
CNF72 -> ] ;
CNF73 -> } ;
CNF74 -> ( ;
CNF75 -> INPUTCNF79 ;
CNF76 -> , ;
CNF77 -> CNF80METHOD ;
CNF78 -> . ;
CNF79 -> ) ;
CNF80 -> . ;
OPERATOR -> + | - | * | / | % ;
VAR -> variable ;
VAL -> angka | VARVALCNF81 | VARVALCNF82 | VARVALCNF83 | CNF84CNF85 | True | False | BOOLEANCNF86 | BOOLEANCNF87 | CNF88BOOLEAN | VARVALCNF89 | VARVALCNF90 | CNF91CNF92 | CNF93CNF94 | CNF95CNF96 | CNF97CNF98 | CNF99CNF100 | CNF101CNF102 | CNF103CNF104 | CNF105CNF106 ;
CNF81 -> OPERATORVARVAL ;
CNF82 -> CNF107VARVAL ;
CNF83 -> CNF108VARVAL ;
CNF84 -> ( ;
CNF85 -> VARVALCNF109 ;
CNF86 -> CNF110BOOLEAN ;
CNF87 -> CNF111BOOLEAN ;
CNF88 -> not ;
CNF89 -> CNF112VARVAL ;
CNF90 -> EVALUATORVARVAL ;
CNF91 -> ' ;
CNF92 -> STRINGCNF113 ;
CNF93 -> " ;
CNF94 -> STRINGCNF114 ;
CNF95 -> [ ;
CNF96 -> VARVALCNF115 ;
CNF97 -> { ;
CNF98 -> VARVALCNF116 ;
CNF99 -> [ ;
CNF100 -> ] ;
CNF101 -> { ;
CNF102 -> } ;
CNF103 -> " ;
CNF104 -> " ;
CNF105 -> ' ;
CNF106 -> ' ;
CNF107 -> ** ;
CNF108 -> // ;
CNF109 -> ) ;
CNF110 -> and ;
CNF111 -> or ;
CNF112 -> is ;
CNF113 -> ' ;
CNF114 -> " ;
CNF115 -> ] ;
CNF116 -> } ;
EVALUATOR -> > | < | CNF117CNF118 | CNF119CNF120 | CNF121CNF122 | CNF123CNF124 ;
CNF117 -> = ;
CNF118 -> = ;
CNF119 -> ! ;
CNF120 -> = ;
CNF121 -> < ;
CNF122 -> = ;
CNF123 -> > ;
CNF124 -> = ;
STRING -> string | STRINGSTRING ;
BOOLEAN -> True | False | BOOLEANCNF125 | BOOLEANCNF126 | CNF127BOOLEAN | VARVALCNF128 | VARVALCNF129 ;
CNF125 -> CNF130BOOLEAN ;
CNF126 -> CNF131BOOLEAN ;
CNF127 -> not ;
CNF128 -> CNF132VARVAL ;
CNF129 -> EVALUATORVARVAL ;
CNF130 -> and ;
CNF131 -> or ;
CNF132 -> is ;
COMMENT -> TRIPLESINGLEQUOTEOPENCNF133 | TRIPLEDOUBLEQUOTEOPENCNF134 | CNF135STRING ;
CNF133 -> STRINGTRIPLESINGLEQUOTECLOSE ;
CNF134 -> STRINGTRIPLEDOUBLEQUOTECLOSE ;
CNF135 -> # ;
TRIPLEDOUBLEQUOTEOPEN -> CNF136CNF137 | CNF138CNF139 ;
CNF136 -> " ;
CNF137 -> CNF140CNF141 ;
CNF138 -> " ;
CNF139 -> CNF142CNF143 ;
CNF140 -> " ;
CNF141 -> CNF144STRING ;
CNF142 -> " ;
CNF143 -> " ;
CNF144 -> " ;
TRIPLEDOUBLEQUOTECLOSE -> CNF145CNF146 | STRINGCNF147 ;
CNF145 -> " ;
CNF146 -> CNF148CNF149 ;
CNF147 -> CNF150CNF151 ;
CNF148 -> " ;
CNF149 -> " ;
CNF150 -> " ;
CNF151 -> CNF152CNF153 ;
CNF152 -> " ;
CNF153 -> " ;
TRIPLESINGLEQUOTEOPEN -> CNF154CNF155 | CNF156CNF157 ;
CNF154 -> ' ;
CNF155 -> CNF158CNF159 ;
CNF156 -> ' ;
CNF157 -> CNF160CNF161 ;
CNF158 -> ' ;
CNF159 -> CNF162STRING ;
CNF160 -> ' ;
CNF161 -> ' ;
CNF162 -> ' ;
TRIPLESINGLEQUOTECLOSE -> CNF163CNF164 | STRINGCNF165 ;
CNF163 -> ' ;
CNF164 -> CNF166CNF167 ;
CNF165 -> CNF168CNF169 ;
CNF166 -> ' ;
CNF167 -> ' ;
CNF168 -> ' ;
CNF169 -> CNF170CNF171 ;
CNF170 -> ' ;
CNF171 -> ' ;
INBRACKET -> CNF172CNF173 | CNF174CNF175 | CNF176CNF177 | CNF178CNF179 ;
CNF172 -> ( ;
CNF173 -> METHODCNF180 ;
CNF174 -> ( ;
CNF175 -> VARVALCNF181 ;
CNF176 -> ( ;
CNF177 -> ) ;
CNF178 -> ( ;
CNF179 -> STRINGCNF182 ;
CNF180 -> ) ;
CNF181 -> ) ;
CNF182 -> ) ;
EXPRES -> CNF183CNF184 | True | False | BOOLEANCNF185 | BOOLEANCNF186 | CNF187BOOLEAN | VARVALCNF188 | VARVALCNF189 | CNF190CNF191 | CNF192CNF193 | CNF194CNF195 | CNF196CNF197 ;
CNF183 -> ( ;
CNF184 -> BOOLEANCNF198 ;
CNF185 -> CNF199BOOLEAN ;
CNF186 -> CNF200BOOLEAN ;
CNF187 -> not ;
CNF188 -> CNF201VARVAL ;
CNF189 -> EVALUATORVARVAL ;
CNF190 -> ( ;
CNF191 -> METHODCNF202 ;
CNF192 -> ( ;
CNF193 -> VARVALCNF203 ;
CNF194 -> ( ;
CNF195 -> ) ;
CNF196 -> ( ;
CNF197 -> STRINGCNF204 ;
CNF198 -> ) ;
CNF199 -> and ;
CNF200 -> or ;
CNF201 -> is ;
CNF202 -> ) ;
CNF203 -> ) ;
CNF204 -> ) ;
RAISE -> CNF205METHOD ;
CNF205 -> raise ;
BREAK -> break ;
PASS -> pass ;
PRINT -> CNF206INBRACKET ;
CNF206 -> print ;
CONTINUE -> continue ;
ELSE -> CNF207CNF208 ;
CNF207 -> else ;
CNF208 -> : ;
IF -> CNF209CNF210 | IFCNF211 | IFCNF212 | IFCNF213 ;
CNF209 -> if ;
CNF210 -> EXPRESCNF214 ;
CNF211 -> SCNF215 ;
CNF212 -> SCNF216 ;
CNF213 -> SRAISE ;
CNF214 -> : ;
CNF215 -> ELIFS ;
CNF216 -> ELSES ;
ELIF -> CNF217CNF218 | ELIFCNF219 | ELIFCNF220 ;
CNF217 -> elif ;
CNF218 -> EXPRESCNF221 ;
CNF219 -> SCNF222 ;
CNF220 -> SCNF223 ;
CNF221 -> : ;
CNF222 -> ELIFS ;
CNF223 -> ELSES ;
TYPE -> str | float | int | double ;
INPUT -> CNF224INBRACKET | TYPECNF225 ;
CNF224 -> input ;
CNF225 -> CNF226CNF227 ;
CNF226 -> ( ;
CNF227 -> INPUTCNF228 ;
CNF228 -> ) ;
RANGE -> CNF229INBRACKET ;
CNF229 -> range ;
FROM -> CNF230CNF231 ;
CNF230 -> from ;
CNF231 -> VARVALIMPORT ;
WHILE -> CNF232CNF233 ;
CNF232 -> while ;
CNF233 -> EXPRESCNF234 ;
CNF234 -> : ;
FOR -> CNF235CNF236 | CNF237CNF238 ;
CNF235 -> for ;
CNF236 -> VARCNF239 ;
CNF237 -> for ;
CNF238 -> VARCNF240 ;
CNF239 -> CNF241CNF242 ;
CNF240 -> CNF243CNF244 ;
CNF241 -> in ;
CNF242 -> STRINGCNF245 ;
CNF243 -> in ;
CNF244 -> RANGECNF246 ;
CNF245 -> : ;
CNF246 -> : ;
RETURN -> CNF247BOOLEAN | CNF248VARVAL ;
CNF247 -> return ;
CNF248 -> return ;
CLASS -> CNF249CNF250 ;
CNF249 -> class ;
CNF250 -> VARCNF251 ;
CNF251 -> : ;
NONE -> None ;
IMPORT -> CNF252CNF253 | CNF254VARVAL ;
CNF252 -> import ;
CNF253 -> VARVALCNF255 ;
CNF254 -> import ;
CNF255 -> CNF256VAR ;
CNF256 -> as ;
METHOD -> VARINBRACKET | VARCNF257 | VARCNF258 ;
CNF257 -> INBRACKETCNF259 ;
CNF258 -> CNF260METHOD ;
CNF259 -> CNF261METHOD ;
CNF260 -> . ;
CNF261 -> . ;
DEF -> CNF262CNF263 ;
CNF262 -> def ;
CNF263 -> VARCNF264 ;
CNF264 -> INBRACKETCNF265 ;
CNF265 -> : ;
WITH -> CNF266CNF267 ;
CNF266 -> with ;
CNF267 -> SCNF268 ;
CNF268 -> CNF269CNF270 ;
CNF269 -> as ;
CNF270 -> VARCNF271 ;
CNF271 -> : ;