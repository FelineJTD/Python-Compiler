S -> S S | VAR = VARVAL | VAR += VARVAL | VAR -= VARVAL | VAR *= VARVAL | VAR /= VARVAL | IF S | PRINT | WHILE S| FOR S| DEF S RETURN | CLASS S | IMPORT | FROM | COMMENT |  VAR INBRACKET | VAR = VAR INBRACKET  | METHOD | WITH S | PASS | RAISE; 
VARVAL ->  VAR | VAL | VARVAL OPERATOR VARVAL | INPUT | VARVAL , VARVAL | METHOD | NONE;
OPERATOR -> + | - | * | / | %;
VAR -> variable;
VAL -> angka | VARVAL OPERATOR VARVAL | VARVAL ** VARVAL | VARVAL // VARVAL | ( VARVAL ) | BOOLEAN | ' STRING '| " STRING " | [ VARVAL ] | { VARVAL } |[ ] | { } | " " | ' ' ;
EVALUATOR -> > | < | = = | ! = | < = | > = ;
STRING -> string | STRING STRING;
BOOLEAN -> True | False | BOOLEAN and BOOLEAN | BOOLEAN or BOOLEAN | not BOOLEAN | VARVAL is VARVAL | VARVAL EVALUATOR VARVAL;
COMMENT -> TRIPLESINGLEQUOTEOPEN STRING TRIPLESINGLEQUOTECLOSE  | TRIPLEDOUBLEQUOTEOPEN STRING TRIPLEDOUBLEQUOTECLOSE | # STRING;   
TRIPLEDOUBLEQUOTEOPEN -> " " "  STRING | " " " ;
TRIPLEDOUBLEQUOTECLOSE -> " " " | STRING " " " ;
TRIPLESINGLEQUOTEOPEN -> ' ' ' STRING | ' ' ' ;
TRIPLESINGLEQUOTECLOSE -> ' ' ' | STRING ' ' ' ;
INBRACKET -> ( METHOD ) | ( VARVAL ) | ( ) | ( STRING ) ;
EXPRES -> ( BOOLEAN )  | BOOLEAN | INBRACKET;
RAISE -> raise METHOD ;
BREAK -> break;
PASS -> pass;
PRINT -> print INBRACKET;
CONTINUE -> continue;
ELSE -> else : ;
IF -> if EXPRES :| IF S ELIF S| IF S ELSE S| IF S RAISE ;
ELIF -> elif EXPRES : | ELIF S ELIF S | ELIF S ELSE S;
TYPE -> str | float | int | double;
INPUT -> input INBRACKET | TYPE ( INPUT );
RANGE -> range INBRACKET;
FROM -> from VARVAL IMPORT ;
WHILE -> while EXPRES : ;
FOR -> for VAR in STRING : | for VAR in RANGE : ;
RETURN -> return BOOLEAN | return VARVAL;
CLASS -> class VAR :;
NONE -> None;
IMPORT -> import VARVAL as VAR | import VARVAL;
METHOD ->  VAR INBRACKET | VAR INBRACKET . METHOD | VAR . METHOD ;
DEF -> def VAR INBRACKET : ;
WITH -> with S as VAR : ;